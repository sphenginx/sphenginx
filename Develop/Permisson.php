<?php

/**
 * 在Linux文件系统中，一个用户对文件或目录所拥有的权限分为三种：
 * ”可读”、”可写”和”可执行”，分别用 1 、2 和 4 来表示，
 * 它们之间可以任意组合：
 * 有“可读”、“可写”权限就用 3 来表示（1 + 2 = 3）；
 * 有”可读“、”可执行“权限就用5来表示（1 + 4 = 5），
 * 三种权限全部拥有就用 7 表示（1 + 2 + 4 = 7）。
 * 实际上，这种运算是基于二进制的。
 * 假设可执行、可写、可读三种权限分别对应三个状态位，如果用户具有某种权限，那么将对应的状态位标识为“1”，反之则标识为“0”。
 * 如果只有“可读”权限，那么就对应二进制数：001，将这个二进制数转成十进制就得到1；如果同时具有“可读”、“可写”权限，二进制数则对应为： 011，转十进制得：3；同理，三种权限都有的，十进制就等于7。
 * 过位运算符很容易就可以做到类似的权限控制：
 *
 * @package default
 * @author 
 **/
//定义权限 
define('READ', 1<< 0);    // 把可读权限放在最右边 
define('WRITE', 1<<1);    // 可读权限向左移一位 
define('EXCUTE', 1<<2);   // 可执行权限向左移两位 
  
//赋予权限 
$user_permission = READ | WRITE; 
  
//验证权限 
echo '可读：', ($user_permission & READ) ? 'Yes' : 'No', "\n"; 
echo '可写：', ($user_permission & WRITE) ? 'Yes' : 'No', "\n"; 
echo '可执行：', ($user_permission & EXCUTE) ? 'Yes' : 'No', "\n"; 

//PHP语言本身的错误控制也是用位运算来做的，它甚至还利用了按位异或和按位非，使得错误控制更加精确。

//位运算的运算对象是二进制的位，速度快，效率高，而且节省存储空间，位运算做权限控制又相当地灵活。但是，位运算也有很大的局限，因为在32位计算机上，位移不能超过32次，这就要求权限数量不超过32种。

//原文转自：http://xiaobin.net/200906/bitwise-permission/